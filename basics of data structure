basics

数据结构 定义 数据的组成方式
         分类 逻辑结构 定义  数据元素之间的逻辑关系，面向问题
                       分类  集合结构 定义 数据元素同属一个集合，之间没有任何关系
                             线性结构 定义 数据元素之间是一对一的关系
                             树形结构 定义 数据元素之间是一对多的关系
                             图形结构 定义 数据元素之间是多对多的关系
              物理结构 定义 数据的逻辑结构在计算机中的存储形式，面向计算机的存储单元
                       分类 顺序存储结构 把数据元素放在地址连续的存储单元里
                            链式存储结构 把数据元素放在地址任意的存储单元里，同时存储一个指针实现逻辑结构、
数据类型 分类 基本类型 如char，int等
              结构类型 由若干个类型组合而成，例如，整型数组是由若干个整型数据组成的
              
抽象数据类型 指数据元素之间的逻辑关系加上定义在这些元素之上的一组操作
             描述抽象数据类型的标准格式如下//结合list文件中的具体例子看
                 ADT 抽象数据类型名
                 Data 数据元素之间的逻辑关系的定义
                 Operation 各种操作
                 endADT


如何分析算法的时间复杂度？

例子 int n=100;
     for(int i=0;i<n;i++) cout<<i<<endl;
 
 首先明确，分析时间复杂度的目的是大致地预测一段代码运行的时间与输入规模n的关系，进而判断这段代码使用的算法的优劣
 计算机执行每一条语句都要花费时间，为了抓住主要矛盾——算法的优劣，我们方便的认为每一条语句执行一次的时间都是一样的，
 称之为一个时间单元。观察上面的语句：int n=100与int i = 0 共 花费2个时间单元
                                     i++与cout<<i<<endl 分别花费n个时间单元，共2n
                                     i<n 花费n+1个时间单元（从i=0到n-1本条语句和上两条语句都要执行，已经n次，i++执行后，i=n，
                                                          再一次进行了判断，但是结果为false，循环结束，所以i<n总共执行了n+1次）
  总共3n+3个时间单元，用T（n）表示运行时间（注意这还不是时间复杂度），那么T（n）=3n+3。其中除了最高阶项外都可以忽略
  甚至最高阶项的系数亦可以忽略（都化作1），因为n很大时，这些量对时间的影响很小（枚举一些数，带入计算即知）；
  n很小时，就算带上这些量，总时间也不大。
  所以T(n)~n=f(n),时间复杂度就写作O(f(n))=O(n),O表示的是T(n)在数量级上小于等于f(n)。常见的时间复杂度中，O(1)表示运行
  时间与n无关.例子 cout<<n<<endl; O(logn)表示运行时间与n大致成对数关系，这个对数的底数默认是2 例子 int i=1;
                                                                                                   while(i<n) i*=2;
                                                                                                   
  从上面的分析过程可知，简单(划重点)的时间复杂度分析时，仅关注循环，且仅关注循环体就可以了。没有循环，大概率是O(1)
             
             
